The functional programming paradigm 

Idea 
Always use PURE FUNCTIONS - functions that only use the input parameters
(i.e., not anything outside the function)
and do not alter the state of the input parameters 
and return the same output for a given input every time. 
That is, we treat input parameters as if they are IMMUTABLE (cannot be changed)
rather than MODIFIABLE (can be changed).
Functions that are not pure are said to have SIDE EFFECTS. 
Note that printing is counted as a side effect, even if 
it is the main purpose of the pure function.

Purity--Efficiency trade-off
Purity makes code less efficient: If a function is pure, then 
we need to define a return variable inside the function in order to 
return it - this costs more memory but is easier to test/track. 
If a function is inpure, then we update the input variable - this costs less memory 
but is harder to test/track.
