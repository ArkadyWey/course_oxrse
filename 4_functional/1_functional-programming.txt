The functional programming paradigm 


Idea 
-------
Always use PURE FUNCTIONS - functions that only use the input parameters
(i.e., not anything outside the function)
and do not alter the state of the input parameters 
and return the same output for a given input every time. 
That is, we treat input parameters as if they are IMMUTABLE (cannot be changed)
rather than MODIFIABLE (can be changed).
Functions that are not pure are said to have SIDE EFFECTS. 
Note that printing is counted as a side effect, even if 
it is the main purpose of the pure function.


Purity--Efficiency trade-off
----------
Purity makes code less efficient: If a function is pure, then 
we need to define a return variable inside the function in order to 
return it - this costs more memory but is easier to test/track. 
If a function is inpure, then we update the input variable - this costs less memory 
but is harder to test/track.


Benefits
----------
Testability  
Easier to test pure functions because not always clear 
what side effects there will be. 

Composability 
Any composition of pure functions is also pure.

Parallelisability 
Output of function depends only on input. 
Therefore can paralellise its use safe in the knowledge 
that independent of where and when (i.e., the state of the environment)
it runs.


Functional programming in practice 
----------
Programs are not usually purely functional. 
They are written such that their user interface is functional. 
Example is pandas. When used, new dataframes are usually made when 
carrying out functions on old data frames.
This is as opposed to methods that update the current data frame that
they act on.
Under the hood though, it is derived from numpy and uses o-o programming.


Order of functions 
-----------
Functions are treated as FIRST CLASS/ORDER. 
They are used as variables that can be passed to other functions as parameters.
One simple way is using lambda functions.
We never name lambdas - if you need to, then why use one?
SECOND CLASS/ORDER functions are those that take other functions as input.

Built in higher order functions -- map, filter, reduce 

Map
Takes a function and applies it to each element in an iterable.

Filter 
Takes a function that returns a boolean and returns elements of an iterable where the boolean is true

Reduce 
Takes a two variable to one variable function and evaluates pairs of elements 
of en iterable sequentially to return a single element


# Recursion